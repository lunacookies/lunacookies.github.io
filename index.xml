<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on arzg’s website</title><link>https://arzg.github.io/</link><description>Recent content in Home on arzg’s website</description><generator>Hugo -- gohugo.io</generator><language>en-uk</language><lastBuildDate>Wed, 09 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://arzg.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Part Two: Whitespace support</title><link>https://arzg.github.io/lang/2/</link><pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate><guid>https://arzg.github.io/lang/2/</guid><description>Last time, we made a parser for simple unnested mathematical expressions, such as 1+1 or 3*4. In this post, we’ll add support for whitespace (so that users of Eldiro will be able to use 2 + 2 instead of 2+2).
We can achieve this by creating an extract_whitespace function similar to extract_digits:
// utils.rs // Let’s copy-paste from extract_digits pub(crate) fn extract_whitespace(s: &amp;amp;str) -&amp;gt; (&amp;amp;str, &amp;amp;str) { let whitespace_end = s .</description></item><item><title>Part One: A basic parser</title><link>https://arzg.github.io/lang/1/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://arzg.github.io/lang/1/</guid><description>The most fundamental part of any language is the parser1 &amp;ndash; a piece of software whose purpose is to take a flat structure (usually text in some form) and convert it into a tree structure. In this post, we’ll make a parser for mathematical expressions that don’t contain nesting. For example, 1 + 1 is allowed, but 2 * 3 + 4 isn’t (because that’s shorthand for (2 * 3) + 4, and thus contains nesting).</description></item><item><title>Part Zero: Getting set up</title><link>https://arzg.github.io/lang/0/</link><pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate><guid>https://arzg.github.io/lang/0/</guid><description>Let’s create a new Rust project:
$ cargo new --lib error: The following required arguments were not provided: &amp;lt;path&amp;gt; USAGE: cargo new &amp;lt;path&amp;gt; --lib For more information try --help Oh, yeah, we need a name. Hmmm. Let’s open the thesaurus and search for ‘language’:
Speech, writing, conversation … ooh, utterance. I like the sound of that! Time to check if it’s taken.
Damn, it’s already taken. Maybe I can do what so many projects seem to do and use a random non-English word.</description></item><item><title>A Post-Mortem of syntax-rust</title><link>https://arzg.github.io/blog/post-mortem/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://arzg.github.io/blog/post-mortem/</guid><description>Earlier this year, I began a project that aims to create a development environment that is orthogonal, fast, and pleasant to use. It would be difficult for one person to write this all by themselves; my aim was to create but a few of the components involved in such a project. My focus started with the shell, which I called Fjord. Then, my focus shifted to creating a text editor.</description></item><item><title>A New Direction for Fjord</title><link>https://arzg.github.io/blog/new-direction/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://arzg.github.io/blog/new-direction/</guid><description>Some context Fjord is a project I’m working on. It started off as a ‘shell’ that has all the applications you want to run from it baked into the shell itself; essentially, a scripting language with the ability to call Rust functions. The plan was for Fjord to be used primarily as a shell &amp;ndash; that is, a shell that cannot run programs, only call functions. Stupid, I know.
Why Fjord is the way it is I’ve always been interested in Plan 9 and its philosophy &amp;ndash; Unix turned up to eleven, as they say.</description></item></channel></rss>